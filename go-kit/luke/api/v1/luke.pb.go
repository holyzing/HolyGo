// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.3
// source: luke.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobStatus int32

const (
	JobStatus_JOBSTATUSUNKNOW JobStatus = 0
	JobStatus_IN_PREP         JobStatus = 1
	JobStatus_IN_QUEUE        JobStatus = 2
	JobStatus_STARTING        JobStatus = 3
	JobStatus_RUNNING         JobStatus = 4
	JobStatus_DONE            JobStatus = 5
	JobStatus_HALTED          JobStatus = 101
	JobStatus_ABORTED         JobStatus = 102
	JobStatus_FAILED          JobStatus = 103
	JobStatus_ERROR           JobStatus = 104
	JobStatus_TERMINATED      JobStatus = 105
	JobStatus_MAINTENANCE     JobStatus = 106
	JobStatus_IMAGE_ERROR     JobStatus = 107
	JobStatus_FAULT           JobStatus = 108
	JobStatus_EVICTED         JobStatus = 109
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0:   "JOBSTATUSUNKNOW",
		1:   "IN_PREP",
		2:   "IN_QUEUE",
		3:   "STARTING",
		4:   "RUNNING",
		5:   "DONE",
		101: "HALTED",
		102: "ABORTED",
		103: "FAILED",
		104: "ERROR",
		105: "TERMINATED",
		106: "MAINTENANCE",
		107: "IMAGE_ERROR",
		108: "FAULT",
		109: "EVICTED",
	}
	JobStatus_value = map[string]int32{
		"JOBSTATUSUNKNOW": 0,
		"IN_PREP":         1,
		"IN_QUEUE":        2,
		"STARTING":        3,
		"RUNNING":         4,
		"DONE":            5,
		"HALTED":          101,
		"ABORTED":         102,
		"FAILED":          103,
		"ERROR":           104,
		"TERMINATED":      105,
		"MAINTENANCE":     106,
		"IMAGE_ERROR":     107,
		"FAULT":           108,
		"EVICTED":         109,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_luke_proto_enumTypes[0].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_luke_proto_enumTypes[0]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{0}
}

type Retcode int32

const (
	Retcode_UNKNOW             Retcode = 0
	Retcode_OK                 Retcode = 200
	Retcode_CREATED            Retcode = 201
	Retcode_ACCEPTED           Retcode = 202
	Retcode_NOT_MODEFIED       Retcode = 304
	Retcode_BAD_REQUEST        Retcode = 400
	Retcode_UNAUTHORIZED       Retcode = 401
	Retcode_FORBIDDEN          Retcode = 403
	Retcode_NOT_FOUND          Retcode = 404
	Retcode_METHOD_NOT_ALLOWED Retcode = 405
	Retcode_TEAPOT             Retcode = 418
	Retcode_INTERNAL_ERROR     Retcode = 500
)

// Enum value maps for Retcode.
var (
	Retcode_name = map[int32]string{
		0:   "UNKNOW",
		200: "OK",
		201: "CREATED",
		202: "ACCEPTED",
		304: "NOT_MODEFIED",
		400: "BAD_REQUEST",
		401: "UNAUTHORIZED",
		403: "FORBIDDEN",
		404: "NOT_FOUND",
		405: "METHOD_NOT_ALLOWED",
		418: "TEAPOT",
		500: "INTERNAL_ERROR",
	}
	Retcode_value = map[string]int32{
		"UNKNOW":             0,
		"OK":                 200,
		"CREATED":            201,
		"ACCEPTED":           202,
		"NOT_MODEFIED":       304,
		"BAD_REQUEST":        400,
		"UNAUTHORIZED":       401,
		"FORBIDDEN":          403,
		"NOT_FOUND":          404,
		"METHOD_NOT_ALLOWED": 405,
		"TEAPOT":             418,
		"INTERNAL_ERROR":     500,
	}
)

func (x Retcode) Enum() *Retcode {
	p := new(Retcode)
	*p = x
	return p
}

func (x Retcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Retcode) Descriptor() protoreflect.EnumDescriptor {
	return file_luke_proto_enumTypes[1].Descriptor()
}

func (Retcode) Type() protoreflect.EnumType {
	return &file_luke_proto_enumTypes[1]
}

func (x Retcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Retcode.Descriptor instead.
func (Retcode) EnumDescriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{1}
}

type ErrMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrMsg) Reset() {
	*x = ErrMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrMsg) ProtoMessage() {}

func (x *ErrMsg) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrMsg.ProtoReflect.Descriptor instead.
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{0}
}

func (x *ErrMsg) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JobRunTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=luke.JobStatus" json:"status,omitempty"`
	TimeStamp int64     `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *JobRunTime) Reset() {
	*x = JobRunTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunTime) ProtoMessage() {}

func (x *JobRunTime) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunTime.ProtoReflect.Descriptor instead.
func (*JobRunTime) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{1}
}

func (x *JobRunTime) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOBSTATUSUNKNOW
}

func (x *JobRunTime) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Id       int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Handle   string   `protobuf:"bytes,4,opt,name=handle,proto3" json:"handle,omitempty"`
	Fields   []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Combined bool     `protobuf:"varint,6,opt,name=combined,proto3" json:"combined,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetJobRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetJobRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *GetJobRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetJobRequest) GetCombined() bool {
	if x != nil {
		return x.Combined
	}
	return false
}

type CreateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync       bool              `protobuf:"varint,1,opt,name=sync,proto3" json:"sync,omitempty"`
	User       string            `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Cores      int32             `protobuf:"varint,3,opt,name=cores,proto3" json:"cores,omitempty"`
	SysPrio    float32           `protobuf:"fixed32,4,opt,name=sys_prio,json=sysPrio,proto3" json:"sys_prio,omitempty"`
	Status     JobStatus         `protobuf:"varint,5,opt,name=status,proto3,enum=luke.JobStatus" json:"status,omitempty"`
	Entrypoint []string          `protobuf:"bytes,6,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Options    map[string]string `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateJobRequest) Reset() {
	*x = CreateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRequest) ProtoMessage() {}

func (x *CreateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{3}
}

func (x *CreateJobRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *CreateJobRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateJobRequest) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CreateJobRequest) GetSysPrio() float32 {
	if x != nil {
		return x.SysPrio
	}
	return 0
}

func (x *CreateJobRequest) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOBSTATUSUNKNOW
}

func (x *CreateJobRequest) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *CreateJobRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchCreateJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*CreateJobRequest `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *BatchCreateJobsRequest) Reset() {
	*x = BatchCreateJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateJobsRequest) ProtoMessage() {}

func (x *BatchCreateJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateJobsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateJobsRequest) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCreateJobsRequest) GetJobs() []*CreateJobRequest {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobHandle  string      `protobuf:"bytes,2,opt,name=job_handle,proto3" json:"job_handle,omitempty"`
	JobId      int64       `protobuf:"varint,1,opt,name=job_id,proto3" json:"job_id,omitempty"`
	JobRuntime *JobRunTime `protobuf:"bytes,3,opt,name=job_runtime,json=jobRuntime,proto3" json:"job_runtime,omitempty"`
	Info       string      `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *JobInfoResponse) Reset() {
	*x = JobInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfoResponse) ProtoMessage() {}

func (x *JobInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfoResponse.ProtoReflect.Descriptor instead.
func (*JobInfoResponse) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{5}
}

func (x *JobInfoResponse) GetJobHandle() string {
	if x != nil {
		return x.JobHandle
	}
	return ""
}

func (x *JobInfoResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobInfoResponse) GetJobRuntime() *JobRunTime {
	if x != nil {
		return x.JobRuntime
	}
	return nil
}

func (x *JobInfoResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type JobDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobDetails []*CreateJobRequest `protobuf:"bytes,1,rep,name=job_details,json=jobDetails,proto3" json:"job_details,omitempty"`
}

func (x *JobDetailResponse) Reset() {
	*x = JobDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDetailResponse) ProtoMessage() {}

func (x *JobDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDetailResponse.ProtoReflect.Descriptor instead.
func (*JobDetailResponse) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{6}
}

func (x *JobDetailResponse) GetJobDetails() []*CreateJobRequest {
	if x != nil {
		return x.JobDetails
	}
	return nil
}

type LukeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method       string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	User         string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	TenantName   string `protobuf:"bytes,4,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
	// Types that are assignable to Body:
	//	*LukeRequest_CreateRequest
	//	*LukeRequest_BatchCreateRequest
	//	*LukeRequest_GetRequest
	Body isLukeRequest_Body `protobuf_oneof:"body"`
}

func (x *LukeRequest) Reset() {
	*x = LukeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LukeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LukeRequest) ProtoMessage() {}

func (x *LukeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LukeRequest.ProtoReflect.Descriptor instead.
func (*LukeRequest) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{7}
}

func (x *LukeRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *LukeRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *LukeRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *LukeRequest) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (m *LukeRequest) GetBody() isLukeRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *LukeRequest) GetCreateRequest() *CreateJobRequest {
	if x, ok := x.GetBody().(*LukeRequest_CreateRequest); ok {
		return x.CreateRequest
	}
	return nil
}

func (x *LukeRequest) GetBatchCreateRequest() *BatchCreateJobsRequest {
	if x, ok := x.GetBody().(*LukeRequest_BatchCreateRequest); ok {
		return x.BatchCreateRequest
	}
	return nil
}

func (x *LukeRequest) GetGetRequest() *GetJobRequest {
	if x, ok := x.GetBody().(*LukeRequest_GetRequest); ok {
		return x.GetRequest
	}
	return nil
}

type isLukeRequest_Body interface {
	isLukeRequest_Body()
}

type LukeRequest_CreateRequest struct {
	CreateRequest *CreateJobRequest `protobuf:"bytes,6,opt,name=create_request,json=createRequest,proto3,oneof"`
}

type LukeRequest_BatchCreateRequest struct {
	BatchCreateRequest *BatchCreateJobsRequest `protobuf:"bytes,7,opt,name=batch_create_request,json=batchCreateRequest,proto3,oneof"`
}

type LukeRequest_GetRequest struct {
	GetRequest *GetJobRequest `protobuf:"bytes,8,opt,name=get_request,json=getRequest,proto3,oneof"`
}

func (*LukeRequest_CreateRequest) isLukeRequest_Body() {}

func (*LukeRequest_BatchCreateRequest) isLukeRequest_Body() {}

func (*LukeRequest_GetRequest) isLukeRequest_Body() {}

type LukeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   Retcode `protobuf:"varint,1,opt,name=retcode,proto3,enum=luke.Retcode" json:"retcode,omitempty"`
	Error     *ErrMsg `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RequestId string  `protobuf:"bytes,3,opt,name=request_id,json=requestID,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Body:
	//	*LukeResponse_Info
	//	*LukeResponse_JobInfo
	//	*LukeResponse_JobDetails
	Body isLukeResponse_Body `protobuf_oneof:"body"`
}

func (x *LukeResponse) Reset() {
	*x = LukeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luke_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LukeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LukeResponse) ProtoMessage() {}

func (x *LukeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luke_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LukeResponse.ProtoReflect.Descriptor instead.
func (*LukeResponse) Descriptor() ([]byte, []int) {
	return file_luke_proto_rawDescGZIP(), []int{8}
}

func (x *LukeResponse) GetRetcode() Retcode {
	if x != nil {
		return x.Retcode
	}
	return Retcode_UNKNOW
}

func (x *LukeResponse) GetError() *ErrMsg {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LukeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (m *LukeResponse) GetBody() isLukeResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *LukeResponse) GetInfo() string {
	if x, ok := x.GetBody().(*LukeResponse_Info); ok {
		return x.Info
	}
	return ""
}

func (x *LukeResponse) GetJobInfo() *JobInfoResponse {
	if x, ok := x.GetBody().(*LukeResponse_JobInfo); ok {
		return x.JobInfo
	}
	return nil
}

func (x *LukeResponse) GetJobDetails() *JobDetailResponse {
	if x, ok := x.GetBody().(*LukeResponse_JobDetails); ok {
		return x.JobDetails
	}
	return nil
}

type isLukeResponse_Body interface {
	isLukeResponse_Body()
}

type LukeResponse_Info struct {
	Info string `protobuf:"bytes,4,opt,name=info,proto3,oneof"`
}

type LukeResponse_JobInfo struct {
	JobInfo *JobInfoResponse `protobuf:"bytes,5,opt,name=job_info,json=jobInfo,proto3,oneof"`
}

type LukeResponse_JobDetails struct {
	JobDetails *JobDetailResponse `protobuf:"bytes,6,opt,name=job_details,json=jobDetails,proto3,oneof"`
}

func (*LukeResponse_Info) isLukeResponse_Body() {}

func (*LukeResponse_JobInfo) isLukeResponse_Body() {}

func (*LukeResponse_JobDetails) isLukeResponse_Body() {}

var File_luke_proto protoreflect.FileDescriptor

var file_luke_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x75,
	0x6b, 0x65, 0x22, 0x36, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x0a, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x7f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x79, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6b, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75,
	0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x75, 0x6b,
	0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x6a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x11,
	0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x6a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x0b, 0x4c,
	0x75, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x14,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6b,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x88,
	0x02, 0x0a, 0x0c, 0x4c, 0x75, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x6b,
	0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x2a, 0xda, 0x01, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x67, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x68, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x69, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x6a, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6b, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x56, 0x49,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x6d, 0x2a, 0xce, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0xca, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x46, 0x49, 0x45, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x0e, 0x0a, 0x09,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x93, 0x03, 0x12, 0x0e, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x94, 0x03, 0x12, 0x17, 0x0a, 0x12,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x95, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x45, 0x41, 0x50, 0x4f, 0x54, 0x10,
	0xa2, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x32, 0x72, 0x0a, 0x0b, 0x4c, 0x75, 0x6b, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x11, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4c, 0x75, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4c, 0x75, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x11, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4c, 0x75, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x75, 0x6b, 0x65, 0x2e, 0x4c,
	0x75, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_luke_proto_rawDescOnce sync.Once
	file_luke_proto_rawDescData = file_luke_proto_rawDesc
)

func file_luke_proto_rawDescGZIP() []byte {
	file_luke_proto_rawDescOnce.Do(func() {
		file_luke_proto_rawDescData = protoimpl.X.CompressGZIP(file_luke_proto_rawDescData)
	})
	return file_luke_proto_rawDescData
}

var file_luke_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_luke_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_luke_proto_goTypes = []interface{}{
	(JobStatus)(0),                 // 0: luke.JobStatus
	(Retcode)(0),                   // 1: luke.Retcode
	(*ErrMsg)(nil),                 // 2: luke.ErrMsg
	(*JobRunTime)(nil),             // 3: luke.JobRunTime
	(*GetJobRequest)(nil),          // 4: luke.GetJobRequest
	(*CreateJobRequest)(nil),       // 5: luke.CreateJobRequest
	(*BatchCreateJobsRequest)(nil), // 6: luke.BatchCreateJobsRequest
	(*JobInfoResponse)(nil),        // 7: luke.JobInfoResponse
	(*JobDetailResponse)(nil),      // 8: luke.JobDetailResponse
	(*LukeRequest)(nil),            // 9: luke.LukeRequest
	(*LukeResponse)(nil),           // 10: luke.LukeResponse
	nil,                            // 11: luke.CreateJobRequest.OptionsEntry
}
var file_luke_proto_depIdxs = []int32{
	0,  // 0: luke.JobRunTime.status:type_name -> luke.JobStatus
	0,  // 1: luke.CreateJobRequest.status:type_name -> luke.JobStatus
	11, // 2: luke.CreateJobRequest.options:type_name -> luke.CreateJobRequest.OptionsEntry
	5,  // 3: luke.BatchCreateJobsRequest.jobs:type_name -> luke.CreateJobRequest
	3,  // 4: luke.JobInfoResponse.job_runtime:type_name -> luke.JobRunTime
	5,  // 5: luke.JobDetailResponse.job_details:type_name -> luke.CreateJobRequest
	5,  // 6: luke.LukeRequest.create_request:type_name -> luke.CreateJobRequest
	6,  // 7: luke.LukeRequest.batch_create_request:type_name -> luke.BatchCreateJobsRequest
	4,  // 8: luke.LukeRequest.get_request:type_name -> luke.GetJobRequest
	1,  // 9: luke.LukeResponse.retcode:type_name -> luke.Retcode
	2,  // 10: luke.LukeResponse.error:type_name -> luke.ErrMsg
	7,  // 11: luke.LukeResponse.job_info:type_name -> luke.JobInfoResponse
	8,  // 12: luke.LukeResponse.job_details:type_name -> luke.JobDetailResponse
	9,  // 13: luke.LukeService.JobWrite:input_type -> luke.LukeRequest
	9,  // 14: luke.LukeService.JobRead:input_type -> luke.LukeRequest
	10, // 15: luke.LukeService.JobWrite:output_type -> luke.LukeResponse
	10, // 16: luke.LukeService.JobRead:output_type -> luke.LukeResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_luke_proto_init() }
func file_luke_proto_init() {
	if File_luke_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_luke_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRunTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LukeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luke_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LukeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_luke_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LukeRequest_CreateRequest)(nil),
		(*LukeRequest_BatchCreateRequest)(nil),
		(*LukeRequest_GetRequest)(nil),
	}
	file_luke_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*LukeResponse_Info)(nil),
		(*LukeResponse_JobInfo)(nil),
		(*LukeResponse_JobDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_luke_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_luke_proto_goTypes,
		DependencyIndexes: file_luke_proto_depIdxs,
		EnumInfos:         file_luke_proto_enumTypes,
		MessageInfos:      file_luke_proto_msgTypes,
	}.Build()
	File_luke_proto = out.File
	file_luke_proto_rawDesc = nil
	file_luke_proto_goTypes = nil
	file_luke_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LukeServiceClient is the client API for LukeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LukeServiceClient interface {
	JobWrite(ctx context.Context, in *LukeRequest, opts ...grpc.CallOption) (*LukeResponse, error)
	JobRead(ctx context.Context, in *LukeRequest, opts ...grpc.CallOption) (*LukeResponse, error)
}

type lukeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLukeServiceClient(cc grpc.ClientConnInterface) LukeServiceClient {
	return &lukeServiceClient{cc}
}

func (c *lukeServiceClient) JobWrite(ctx context.Context, in *LukeRequest, opts ...grpc.CallOption) (*LukeResponse, error) {
	out := new(LukeResponse)
	err := c.cc.Invoke(ctx, "/luke.LukeService/JobWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lukeServiceClient) JobRead(ctx context.Context, in *LukeRequest, opts ...grpc.CallOption) (*LukeResponse, error) {
	out := new(LukeResponse)
	err := c.cc.Invoke(ctx, "/luke.LukeService/JobRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LukeServiceServer is the server API for LukeService service.
type LukeServiceServer interface {
	JobWrite(context.Context, *LukeRequest) (*LukeResponse, error)
	JobRead(context.Context, *LukeRequest) (*LukeResponse, error)
}

// UnimplementedLukeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLukeServiceServer struct {
}

func (*UnimplementedLukeServiceServer) JobWrite(context.Context, *LukeRequest) (*LukeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobWrite not implemented")
}
func (*UnimplementedLukeServiceServer) JobRead(context.Context, *LukeRequest) (*LukeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRead not implemented")
}

func RegisterLukeServiceServer(s *grpc.Server, srv LukeServiceServer) {
	s.RegisterService(&_LukeService_serviceDesc, srv)
}

func _LukeService_JobWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LukeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LukeServiceServer).JobWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luke.LukeService/JobWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LukeServiceServer).JobWrite(ctx, req.(*LukeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LukeService_JobRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LukeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LukeServiceServer).JobRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luke.LukeService/JobRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LukeServiceServer).JobRead(ctx, req.(*LukeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LukeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luke.LukeService",
	HandlerType: (*LukeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobWrite",
			Handler:    _LukeService_JobWrite_Handler,
		},
		{
			MethodName: "JobRead",
			Handler:    _LukeService_JobRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "luke.proto",
}
