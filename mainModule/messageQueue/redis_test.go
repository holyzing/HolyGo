package messageQueue

/**
1- 你们的项目中都有没有用到 Redis 你简要的告诉我一下，你们都用 redis 做了啥，解决了什么问题，在使用redis的过程中
   有没有出现过你们没有预料到的问题，比如缓存雪崩，穿透啥的 ？

   答：用 redis 作为一个共享锁（分布式锁）来防止用户重复点击提交运行任务，用redis 作为分布式定时任务的锁。
   答：用 redis 作为一个复杂计算结果的缓存，比如统计昨天项目使用的算力，统计本月截止昨天项目使用的算力，
      根据具体业务需求可缓存 （第二日零点 - 首次查询时间）长时间。
   答：我们用 redis 还做了一个缓存式的消息队列，任务分发单元会先从 rabbitMQ 中读取任务队列，然后在缓存到 redis的队列中。
      任务分发队列直接消费 redis队列来进行任务分发。为什么即用了 rebbitMq又用了 redis，历史遗留问题，
	  我本人觉得没有必要增加 redis。但是增加了redis，又多了一个屏障，即 RabbitMq宕机了，缓存在 redis 中的任务还能执行。
	  但是这又会带来一个问题，就是 redis宕机了，那任务就执行不了了。并没有做 在redis宕机后，去直接消费 RabbitMq的操作。

2- Hbase 都有哪些组件，是如何存储的，行健是怎么设计的 （因为你简历中提到了）
3- Linux 中的命令都有哪些，top 1 怎么做
4- Mysql 中的锁，慢查询优化
5 -Redis 部署
6- Python 的全局解释器锁 能不能保证线程安全，是如何保证的 ？？

   假设有两个 Python 线程同时引用 a，那么双方就都会尝试操作该数据，
   很有可能造成引用计数的条件竞争，导致引用计数只增加 1（实际应增加 2），
   这造成的后果是，当第一个线程结束时，会把引用计数减少 1，此时可能已经达到
   释放内存的条件（引用计数为 0），当第 2 个线程再次视图访问 a 时，就
   无法找到有效的内存了。

   虽然是单线程 执行的，Python 还有 check interval 这样的抢占机制，比如
   i += 1 不是原子的。所以会出现线程不完全的问题。
7- asyncio
8- 百度时的准备，超级超级超级差劲，为什么遇到问题不能冷静思考？解决问题？
9- redis 的面试题必须好好的刷一遍，该如何以很专业的语句回答面试官的提问 ？？ 语言组织能力为什么那么差 ？？
*/

var RedisHost string = ""
